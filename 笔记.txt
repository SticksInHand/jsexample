一、dom基础

1、dom节点
childNodes \ children
获取第一级子元素
有兼容性问题（空白节点）， nodeType属性
firstChild \ firstElementChild
获取子元素里的第一个
lastChild \ lastElementChild
获取子元素里的最后一个
nextSibling \ nextElementSibling
获取指定元素的下一个兄弟节点
previousSibling \ previousElementSibling
获取指定元素的上一个兄弟节点

parentNode
获取父节点，点击链接隐藏整个li

parentNode&offsetParent区别
offsetLeft \ offsetTop \ offsetWidth \ clientWidth


2、操作节点的方式

有兼容性问题，标准下不能获取两层
获取：getAttribute(名称)
设置：setAttribute(名称, 值)
删除：removeAttribute(名称)
第三种方式的好处：自定义属性、相对网址

3、创建和插入元素

创建DOM元素
createElement(标签名)		创建一个节点
appendChild(节点)			追加一个节点
例子：留言板插入内容
插入元素
insertBefore(节点, 原有节点)	在已有元素前插入
例子：倒序留言板插入内容


4、删除和替换元素

删除DOM元素
removeChild(节点)		删除一个节点
例子：删除留言
替换DOM元素
replaceChild(节点, 已有节点)	替换节点


5、知识点总结

DOM元素操作
4种获取节点的封装函数：
   first() last() next() pre()
获取属性第三种方式：
	getAttribute、setAttribute、removeAttribute
获取元素相对于屏幕的距离：
	posLeft()  posTop()


二、dom应用

1、
用className选择元素
如何用className选择元素
选出所有元素
通过className条件筛选
封装成函数
getByClass()
addClass() – 添加class
removeClass() – 移除class

2、表格应用
获取
tBodies、tHead、tFoot、rows、cells
表格的创建
数据添加
隔行变色
删除一行
选择
checkbox 全选、反选

3、BOM与JAVASCRIPT
打开、关闭窗口
open
close
关闭时提示问题, 兼容性问题
常用属性
window.navigator.userAgent
window.location

4、窗口尺寸
可视区尺寸
document.documentElement.clientWidth
document.documentElement.clientHeight
滚动距离
document.body.scrollTop
document.documentElement.scrollTop
内容高度
document.body.scrollHeight
文档高度
document.body.offsetHeight

5、常用方法和事件
window对象常用事件
onscroll  滚动条事件
onresize 窗口尺寸发生变化触发的事件
优酷弹窗的例子


6、知识点总结
表格——元素、数据操作
通过className选元素 getByClass()
class的操作
获取网页可视区大小、整个页面大小、滚动条
getScroll()   veiwHeight()   documentHeight()
BOM：网址、浏览器信息、open等


三、事件详解

1、
  焦点事件
  获取焦点事件onfocus \  失去焦点事件 onblur
  例子：输入框提示文字
  This关键字
  This指向 ：谁调用的this就指向谁
  Event对象
  用来获取事件的详细信息：鼠标位置、键盘按键
  Event对象的兼容：ev = ev || window.event
  Event对象下的获取鼠标位置：clientX clientY
  例子：方块跟着鼠标移动

2、
  事件流
  事件冒泡
  取消冒泡：ev.cancelBubble=true
  例子：仿select控件
  事件捕获
  Ie下是没有的，在绑定事件中，标准下是有的

3、
绑定事件
普通事件与绑定事件的区别

绑定事件的兼容性
attachEvent \  addEventListener
Ie下需要注意的，执行顺序、this指向
例子：关闭两个更多按钮


取消普通事件与取消绑定事件

4、
keyCode
获取用户按下键盘的哪个按键
例子：键盘控制Div移动
其他属性
ctrlKey、shiftKey、altKey
例子：提交留言
回车 提交
ctrl+回车 提交

5、
默认事件
什么是默认事件
阻止默认事件
普通写法：return false;
例子1.	屏蔽右键菜单 :  oncontextmenu
弹出自定义右键菜单

6、知识点总结
默认事件
什么是默认事件
阻止默认事件
普通写法：return false;
例子1.	屏蔽右键菜单 :  oncontextmenu
弹出自定义右键菜单

四、事件高级应用

1、拖拽
简易拖拽
拖拽原理
鼠标和Div的相对距离不变
三大事件
把拖拽加到document上

FF下, 空Div拖拽bug


2、高级拖拽

完美拖拽
Ie下设置全局捕获: setCapture(选中文字)
标准下阻止默认事件，可以拖拽图片啦
封装成函数

限制范围
不能拖拽出页面可视区
磁性吸附

碰撞检测
碰撞检测原理——九宫格
例子：拖拽中的碰撞检测
拖拽改变层大小

3、自定义滚动条

拖拽
只有横向拖拽
限制范围——范围的大小
计算比例——当前值/最大值
控制其他对象
例子1：控制物体的大小
例子2：控制物体的透明度
例子3：控制文字滚动

4、鼠标滚轮

鼠标滚轮事件
Ie/chrome : onmousewheel
firefox : DOMMouseScroll
滚轮属性：wheelDelta \ detail
阻止默认事件：绑定写法：preventDefault

鼠标滚轮与自定义滚动条结合

5、cookie
cookie的作用
页面用来保存信息
同一个网站中所有页面共享一套cookie
cookie的使用
设置cookie 过期时间expires
读取cookie 字符串分割
删除cookie 已经过期
例子：
用cookie记录上一次拖拽的位置
Cookie登录后删除信息

6、知识点总结
拖拽原理
	三个事件、存（被拖拽对象）距离、计算move的时候的left和top
封装完美拖拽
	drag()
碰撞检测
滚轮事件：mousewheel / DOMMouseScroll
Cookie的封装
	setCookie() getCookie() delCookie()


五、运动类特效

1、运动基础
运动基础
让Div运动起来
速度——物体运动的快慢
运动中的Bug
不会停止
速度取某些值会无法停止
到达位置后再点击还会运动
重复点击速度加快
匀速运动
速度不变

2、运动框架及应用
运动框架
在开始运动时，关闭已有定时器
检测停止条件和执行运动对立(if/else)
运动框架实例
例子1：淡入淡出的图片
用变量存储透明度

例子2：“分享到”侧边栏

3、缓冲运动
摩擦运动
逐渐变慢，最后停止
缓冲运动
与摩擦力的区别:可以精确的停到指定目标点
距离越远速度越大
速度由距离决定
速度=(目标值-当前值)/缩放系数
Bug：速度取整
值取整
例子：一个Div，鼠标移入变宽

4、多物体运动
多个物体同时运动
例子：多个Div，鼠标移入变宽
单定时器，存在问题
每个Div一个定时器

例子：多个图片淡入淡出

5、任意值运动框架
支持不同属性，能让某个值运动起来
用currentStyle代替offset

运动属性作为参数
封装opacity
给属性默认值

6、知识点总结
记住缓冲公式
理解什么是运动框架和运动框架的格式

7、练习项目
1.淡入淡出图片
2.右键菜单淡入淡出
3.点击方块跟随
4.分享
5.幻灯片（上下）|| ( 左右 )
6.淘宝幻灯片（渐变）


六、运动中级
1、完美运动框架
理解JSON
For in 获取属性和值

运动终止条件
所有的值都到达目标点的时候，才停止

2、链式运动框架
动作接口
运动停止时，执行函数
运动停止时，开始下一次运动
例子：方块先变宽，再变高

3、运动框架总结
运动框架演变过程
startMove(iTarget)			运动框架
startMove(obj, iTarget)		多物体
startMove(obj, attr, iTarget)	任意值
startMove(obj, json)		完美运动
startMove(obj, json, fn)		完美运动之链式

4、运动框架应用
运动框架应用
例子：多图片展开、收缩
布局转换
例子：新浪微博
链式运动
例子：点击移动多图片位置

5、图片预加载
图片预加载
不直接修改img元素的src，加载完成后，再显示
用到的事件
onload，加载完成后显示图片
onerror，加载失败时，进行其他处理(跳过、显示信息等)
预判加载——自动加载下一张图片
延迟加载——加载可视区图片，其他图片等进入可视		     区再加载

6、其他运动形式
返回顶部
注意滚动条拖拽时，清除定时器

无缝滚动

7、知识点练习
1.新浪微博效果（留言板）
2.无缝滚动
3.返回顶部
4.预加载下一张
5.多图片展开收缩
6.上移下移
7.手风琴
8.延迟加载淡出图片
9.土豆网右下角悬浮


七、面向对象基础
1、什么是面向对象
什么是对象
我们一直都在使用对象
数组 Array  时间 Date 字符串 String
对象是一个整体，对外提供一些操作
数组 sort()  时间 getHours() 字符串 charAt()
什么是面向对象
用对象的思想去编程，对外提供方法的接口
其他人使用的时候，只要告诉他怎么用，不用关心内部实现的细节
面向对象是一种通用思想，并非只有编程中能用，任何事情都可以用


2、js中的面向对象
对象的组成
方法（行为、操作）——函数：过程、动态的
属性——变量：状态、静态的
面向对象编程(OOP)的特点
抽象：抓住核心问题
封装：不考虑内部实现，只考虑功能使用
继承：从已有对象上，继承出新的对象

编写复杂效果就像搭积木

3、第一个面向对象程序

为对象添加方法和属性
this详解，事件处理中this的本质
object对象：
创建两个人，重复代码太多
工厂方式
用构造函数创建一个类
什么是类、对象（实例）：模具和零件
对象的引用问题
问题：所有操作集中在构造函数中、函数重复定义

4、原型、prototype
为Array添加sum方法
一次只能为一个对象添加，类似于行间样式
什么是原型
原型是class，修改他可以影响一类元素
原型是加到构造函数上的(Sum方法添加到原型上)
普通方法优先级高于原型方法
系统对象注意事项
1.不要覆盖原有方法
2.不要轻易添加方法

5、流行的面向对象书写方式
用混合方式构造对象
混合的的构造函数/原型方式(这坑爹的名字，真长)
Mixed Constructor Function/Prototype Method
原则
构造函数：加属性
原型：加方法
对象命名规范
类名首字母大写

6、实例：面向对象的选项卡
用混合方式构造对象
混合的的构造函数/原型方式(这坑爹的名字，真长)
Mixed Constructor Function/Prototype Method
原则
构造函数：加属性
原型：加方法
对象命名规范
类名首字母大写

7、知识点总结

理解面向对象
JS中对象的组成
用工厂方法创建一个对象
原型的概念和使用
修改系统对象（及原型）
混合的构造函数/原型方式
对象和闭包

8、练习
1.为数组对象添加求和，最大值的方法
2.为字符串对象添加判断是不是最后一个字母
3.面向对象的选项卡
4.给选项卡添加一个自动播放的方法
5.任意学过的效果改写成面向对象
6.面向对象的面试题

八、ajax原理
1、ajax
什么是Ajax
Asynchronous JavaScript and XML（异步JavaScript和XML)
节省用户操作，时间，提高用户体验，减少数据请求
传输获取数据
使用Ajax
使用ajax获取某一文本文件的内容
Ajax过程详解
创建对象XMLHttpRequest()
Date()对象
ActiveXObject(‘Microsoft.XMLHTTP’)

2、php
什么是Ajax
Asynchronous JavaScript and XML（异步JavaScript和XML)
节省用户操作，时间，提高用户体验，减少数据请求
传输获取数据
使用Ajax
使用ajax获取某一文本文件的内容
Ajax过程详解
创建对象XMLHttpRequest()
Date()对象
ActiveXObject(‘Microsoft.XMLHTTP’)

后端数据的接收
$_GET
- 通过URL传递给该脚本的变量的数组
$_POST
- 通过HTTP POST方法（表单）传递给该脚本的变量的数组
前后台键名和传输方式必须一致
数据传输方式
数据获取方式


3、
Open方法
三个参数的含义
1、提交方式 Form-method
2、提交地址 Form-action
3、异步（同步）
Send方法
发送数据请求，相当于Form的submit

请求状态监控
onreadystatechange事件
readyState属性：请求状态
0	（未初始化）还没有调用open()方法
1	（载入）已调用send()方法，正在发送请求
2	（载入完成）send()方法完成，已收到全部响应内容
3	（解析）正在解析响应内容
4	（完成）响应内容解析完成，可以在客户端调用了
status属性：服务器(请求资源)的状态
返回的内容
responseText：返回以文本形式存放的内容
responseXML：返回XML形式的内容

4、编写ajax
发送请求(get和post的区别)
send(要发送的数据)：发送请求
中文编码
缓存
POST：setRequestHeader(类型, 内容)：设置请求头
"Content-Type","application/x-www-form-urlencoded”
数据类型(返回数据的处理)
服务器返回给咱们的真正数据
XML、HTML、JSON
JSON的写法
Eval解析JSON的时候需要注意的地方
JSON.parse() : 字符串解析成对象

5、ajax的封装
AJAX的封装
参数
回调函数
JSON格式的参数


九、ajax跨越解决--jsonp
跨域的问题
域：域名
跨域请求（访问）：一个域名下的文件请求另外一个域名下的资源，就产生了跨域
跨域的解决
Jsonp : json padding

<script>标签
src的作用 ： 加载（包含指定的外部文件）
可以跨域包含
被包含的资源可以是任何类型的文件(可以是txt,php等)
他只关注被包含的文件的内容是否是合法的JS
原理
定义函数
包含外部文件，在被包含的文件中执行调用定义好的函数
参数的（数据）的实现
问题：包含就调用，通过动态创建<script>实现按需调用
问题：包含动态文件时可以通过一个接口实现按需生成调用函数名称

JSONP的封装

实例
百度（淘宝）搜索下拉提示
126天气预报
（选）豆瓣

AJAX+JSONP的封装

十、模块化开发
1、js模块化
当你的网站开发越来越复杂的时候，会经常遇到这些问题吗？
冲突
性能
依赖

seajs
一个适合web端的模块加载器
解决刚才出现的问题，提升代码的可维护性
http://seajs.org
模块的概念

seajs如何解决?
①引入sea.js的库
②如何变成模块？
define
③如何调用模块？
exports
seajs.use
④如何依赖模块？
require

例子：模块化让工作变得简单
webqq

深入学习seajs
define
require
seajs.use
seajs.config
alias
preload
debug

模块化历史
ECMAScrpt第六版将正式支持模块语法
nodeJS
commonJS
AMD
requireJS
跟seajs一样，web端模块化
seajs采用cmd规范

2、






























